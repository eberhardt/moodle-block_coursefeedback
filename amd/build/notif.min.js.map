{
  "version": 3,
  "file": "notif.min.js",
  "sources": [
    "../src/notif.js"
  ],
  "sourcesContent": [
    "// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for the coursefeedback blocks rankingpage (ranking.php).\n *\n * @module      block_coursefeedback\n * @copyright   2022 onwards Felix Di Lenarda (@ innoCampus, TU Berlin)\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\n\n// Initiate the needed  global vars through an ajax call.\nlet courseid;\nlet feedbackid;\nlet questionid;\nlet questionsum;\nlet sendingactive = false;\n\n/**\n * fadeOut element\n * @param {Object} element\n * @returns {Promise}\n */\nfunction fadeOut(element) {\n    return new Promise((resolve)=>{\n        let opacity = parseFloat(window.getComputedStyle(element).getPropertyValue(\"opacity\"));\n        // Fallback if opacity isn't computed properly.\n        if (isNaN(opacity)) {\n            opacity = 0;\n        }\n        let fadingout = setInterval(function () {\n            if (opacity <= 0) {\n                clearInterval(fadingout);\n                resolve();\n            } else {\n                opacity = opacity - 0.1;\n                element.style.opacity = opacity;\n            }\n        }, 50);\n    });\n}\n\n/**\n * fadeIn element\n *\n * @param {Object} element\n */\nfunction fadeIn(element) {\n    let opacity = parseFloat(window.getComputedStyle(element).getPropertyValue(\"opacity\"));\n    // Fallback if opacity isn't computed properly.\n    if (isNaN(opacity)) {\n        opacity = 0;\n    }\n    let fadingin = setInterval(function () {\n        if (opacity >= 1) {\n            clearInterval(fadingin);\n        } else {\n            opacity = opacity + 0.1;\n            element.style.opacity = opacity;\n        }\n    }, 50);\n}\n\n/**\n * send and receive feedback after answer was given\n *\n * @param {number} feedback: given answer\n */\nconst sendandreceive_feedback = (function() {\n    return function sendandreceive_feedback(feedback) {\n        // Prevent doubleclicking for the same question.\n        if (sendingactive == true) {\n            return;\n        } else {\n            sendingactive = true;\n        }\n\n        // Get needed elements/nodes.\n        let notifikations = document.getElementById(\"user-notifications\");\n        let feedback_notif = notifikations.getElementsByClassName(\"cfb-notification-container\")[0];\n        let questioninfo = notifikations.getElementsByClassName(\"cfb-question-info\")[0];\n        let question = notifikations.getElementsByClassName(\"cfb-question\")[0];\n        let notif = feedback_notif.parentElement;\n\n        // Fading out notification after clicking an emoji.\n        let fopromise = fadeOut(notif);\n\n        // Submit given FB to the server and receive new question if any left.\n        let promises = Ajax.call([{\n            methodname: 'block_coursefeedback_answer_question_and_get_new',\n            args: {\n                courseid: courseid,\n                feedback: feedback,\n                feedbackid: feedbackid,\n                questionid: questionid,\n            }\n        }]);\n        promises[0].done(function (data) {\n            // Put new notification content and fade in after fadingout-promise resolved.\n            fopromise.then(()=> {\n                if (data.nextquestion === null) {\n                    // All questions were answered (no following question).\n                    let thanksstring = Str.get_string('notif_thankyou', 'block_coursefeedback');\n                    thanksstring.done(function (string) {\n                        feedback_notif.innerHTML = string;\n                        fadeIn(notif);\n                    });\n                } else {\n                    // A following question was returned.\n                    questionid = data.nextquestionid;\n                    let qstr = Str.get_string('notif_question', 'block_coursefeedback');\n                    qstr.done(function (string) {\n                        questioninfo.innerHTML = string.concat(questionid).concat('/').concat(questionsum).concat(': ');\n                        question.innerHTML = data.nextquestion;\n                        sendingactive = false;\n                        fadeIn(notif);\n                    });\n                }\n            });\n        }).fail(function (ex) {\n            window.console.error(ex);\n        });\n    };\n})();\n\n/**\n * Initialise by activatin the emoji click listeners\n *\n * @param {number} cid courseid\n * @param {number} fbid feedbackid\n * @param {number} quid questionid\n * @param {number} qusum how many question in total in this FB\n */\nexport const initialise = (cid, fbid, quid, qusum) => {\n    // Set global vars.\n    courseid = cid;\n    feedbackid = fbid;\n    questionid = quid;\n    questionsum = qusum;\n\n    let notifikations = document.getElementById(\"user-notifications\");\n    let feedback_notif = notifikations.getElementsByClassName(\"cfb-notification-container\")[0];\n\n    // To prevent the destruction of our click events from bootsrap.\n    // We need to remove the 'role' attribute from this notification.\n    feedback_notif.parentElement.removeAttribute(\"role\");\n\n    // Add click listener to our fbemoji-buttons.\n    const emojis = [...notifikations.getElementsByClassName(\"cfb-fbemoji\")];\n    emojis.map((emoji) => {\n        let answer = emojis.indexOf(emoji)+1;\n        emoji.onclick = () => {\n            sendandreceive_feedback(answer, courseid, feedbackid, questionid, questionsum);\n        };\n    });\n\n    // Bootstrap 4 does not have opacity classes, inline styles are filtered out for some reason.\n    // Therefore we use invisible class and then switch to opacity to fade in.\n    let overlayicon = notifikations.getElementsByClassName(\"cfb-overlay-icon\")[0];\n    let buttoncontainer = notifikations.getElementsByClassName(\"cfb-button-containaer\")[0];\n    buttoncontainer.style.opacity = 0;\n    buttoncontainer.classList.remove('invisible');\n    // Fase out the loadingspinner and fade in the fbemoji-buttons.\n    let fopromise = fadeOut(overlayicon);\n    fopromise.then(()=> {\n        fadeIn(buttoncontainer);\n    });\n};\n\n"
  ],
  "names": [
    "courseid",
    "feedbackid",
    "questionid",
    "questionsum",
    "sendingactive",
    "fadeOut",
    "element",
    "Promise",
    "resolve",
    "opacity",
    "parseFloat",
    "window",
    "getComputedStyle",
    "getPropertyValue",
    "isNaN",
    "fadingout",
    "setInterval",
    "clearInterval",
    "style",
    "fadeIn",
    "fadingin",
    "sendandreceive_feedback",
    "feedback",
    "notifikations",
    "document",
    "getElementById",
    "feedback_notif",
    "getElementsByClassName",
    "questioninfo",
    "question",
    "notif",
    "parentElement",
    "fopromise",
    "Ajax",
    "call",
    "methodname",
    "args",
    "done",
    "data",
    "then",
    "nextquestion",
    "Str",
    "get_string",
    "string",
    "innerHTML",
    "nextquestionid",
    "concat",
    "fail",
    "ex",
    "console",
    "error",
    "cid",
    "fbid",
    "quid",
    "qusum",
    "removeAttribute",
    "emojis",
    "map",
    "emoji",
    "answer",
    "indexOf",
    "onclick",
    "overlayicon",
    "buttoncontainer",
    "classList",
    "remove"
  ],
  "mappings": "uXA2BIA,SACAC,WACAC,WACAC,u9DACAC,eAAgB,WAOXC,QAAQC,gBACN,IAAIC,SAAQ,SAACC,aACZC,QAAUC,WAAWC,OAAOC,iBAAiBN,SAASO,iBAAiB,YAEvEC,MAAML,WACNA,QAAU,OAEVM,UAAYC,aAAY,WACpBP,SAAW,GACXQ,cAAcF,WACdP,YAEAC,SAAoB,GACpBH,QAAQY,MAAMT,QAAUA,WAE7B,gBASFU,OAAOb,aACRG,QAAUC,WAAWC,OAAOC,iBAAiBN,SAASO,iBAAiB,YAEvEC,MAAML,WACNA,QAAU,OAEVW,SAAWJ,aAAY,WACnBP,SAAW,EACXQ,cAAcG,WAEdX,SAAoB,GACpBH,QAAQY,MAAMT,QAAUA,WAE7B,QAQDY,wBACK,SAAiCC,aAEf,GAAjBlB,eAGAA,eAAgB,MAIhBmB,cAAgBC,SAASC,eAAe,sBACxCC,eAAiBH,cAAcI,uBAAuB,8BAA8B,GACpFC,aAAeL,cAAcI,uBAAuB,qBAAqB,GACzEE,SAAWN,cAAcI,uBAAuB,gBAAgB,GAChEG,MAAQJ,eAAeK,cAGvBC,UAAY3B,QAAQyB,OAGTG,cAAKC,KAAK,CAAC,CACtBC,WAAY,mDACZC,KAAM,CACFpC,SAAUA,SACVsB,SAAUA,SACVrB,WAAYA,WACZC,WAAYA,eAGX,GAAGmC,MAAK,SAAUC,MAEvBN,UAAUO,MAAK,WACe,OAAtBD,KAAKE,aAEcC,IAAIC,WAAW,iBAAkB,wBACvCL,MAAK,SAAUM,QACxBjB,eAAekB,UAAYD,OAC3BxB,OAAOW,WAIX5B,WAAaoC,KAAKO,eACPJ,IAAIC,WAAW,iBAAkB,wBACvCL,MAAK,SAAUM,QAChBf,aAAagB,UAAYD,OAAOG,OAAO5C,YAAY4C,OAAO,KAAKA,OAAO3C,aAAa2C,OAAO,MAC1FjB,SAASe,UAAYN,KAAKE,aAC1BpC,eAAgB,EAChBe,OAAOW,iBAIpBiB,MAAK,SAAUC,IACdrC,OAAOsC,QAAQC,MAAMF,6BAaP,SAACG,IAAKC,KAAMC,KAAMC,OAExCtD,SAAWmD,IACXlD,WAAamD,KACblD,WAAamD,KACblD,YAAcmD,UAEV/B,cAAgBC,SAASC,eAAe,sBACvBF,cAAcI,uBAAuB,8BAA8B,GAIzEI,cAAcwB,gBAAgB,YAGvCC,0BAAajC,cAAcI,uBAAuB,gBACxD6B,OAAOC,KAAI,SAACC,WACJC,OAASH,OAAOI,QAAQF,OAAO,EACnCA,MAAMG,QAAU,WACZxC,wBAAwBsC,OAAQ3D,SAAUC,WAAYC,WAAYC,qBAMtE2D,YAAcvC,cAAcI,uBAAuB,oBAAoB,GACvEoC,gBAAkBxC,cAAcI,uBAAuB,yBAAyB,GACpFoC,gBAAgB7C,MAAMT,QAAU,EAChCsD,gBAAgBC,UAAUC,OAAO,aAEjB5D,QAAQyD,aACdvB,MAAK,WACXpB,OAAO4C"
}